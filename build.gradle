buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'license'
    
    group = 'com.anjlab.tapestry5'
    
    license {
        header rootProject.file('LICENSE')
        strictCheck true
    }
    
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-eclipse'
}

project.ext.tapestry_version='5.3.7'

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

subprojects {
    apply plugin: 'java'
    
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    
    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    dependencies {
        def slf4j_version = '1.7.5'
        def logback_version = '1.0.13'
        
        compile "org.slf4j:slf4j-api:${slf4j_version}"
        runtime "org.slf4j:jcl-over-slf4j:${slf4j_version}"
        runtime "org.slf4j:log4j-over-slf4j:${slf4j_version}"
        
        runtime "ch.qos.logback:logback-core:${logback_version}"
        runtime "ch.qos.logback:logback-classic:${logback_version}"
        
        provided "org.apache.tapestry:tapestry-core:${tapestry_version}"
    }
    
    apply plugin: 'com.jfrog.bintray'
    
    bintray {
        user = "$bintray_user"
        key = "$bintray_api_key"
        publications = ['mavenJava']
        pkg {
            repo = 'maven'
            userOrg = 'anjlab' // an optional organization name when the repo belongs to one of the user's orgs
            licenses = ['Apache-2.0']
        }
        dryRun = false // whether to run this as dry-run, without deploying
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    jar.dependsOn sourcesJar
    jar.dependsOn javadocJar
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    def pomFragments = {
        developers {
            developer {
                id "dmitrygusev"
                name "Dmitry Gusev"
                email "dmitry@anjlab.com"
            }
        }
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                
                pom.withXml {
                    def root = asNode()
                    
                    def deps = root.children().find {
                        it.name().localPart == 'dependencies'
                    }
                    
                    root.children().remove(deps)
                    
                    root.appendNode('description', project.description)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode("name", "The Apache Software License, Version 2.0")
                    license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")
                    license.appendNode("distribution", "repo")

                    root.children().last() + pomFragments
                    
                    def pom = new XmlParser().parse(project.file("build/poms/pom-default.xml"))
                    
                    pom.dependencies.each {
                        root.append(it)
                    }
                }
            }
        }
    }
}
